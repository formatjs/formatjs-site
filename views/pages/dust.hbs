{{setTitle "Dust"}}
{{setDescription "Documentation and examples of Dust integration."}}

<header class="head">
    {{> nav}}
</header>

<main>
    <section class="intro">
        <div class="l-wrap">
            <h1 class="intro-package">
                <span class="intro-package-name">
                    Dust Intl
                </span>
                <img class="intro-package-mark" alt="Dust logo" src="/img/dust.svg">
            </h1>

            <h2 class="tagline">{{package.description}}</h2>

            {{> integrations/package-meta}}

        </div>

        {{> integrations/package-install}}
    </section>

    <section class="docs l-wrap">
        <ul>
            <li><a href="#formatDate"><code>{@formatDate}</code></a> to format a date value</li>
            <li><a href="#formatTime"><code>{@formatTime}</code></a> to format a date value with time formats</li>
            <li><a href="#formatRelative"><code>{@formatRelative}</code></a> to format a date relative to now; e.g. "3 hours ago"</li>
            <li><a href="#formatNumber"><code>{@formatNumber}</code></a> to format a numeric value</li>
            <li><a href="#formatMessage"><code>{@formatMessage}</code></a> to format a complex message</li>
        </ul>

        <p>
            There is one more block helper called <a href="#intl"><code>{@intl}</code></a> that can be used to create
            a new intl data scope. This is useful when you need to render part of the page in a particular
            locale, or need to supply the i18n data to Dust via the template context.
        </p>

        <h2 id="installation">Installation</h2>


        <h3 id="install-browser">Browser</h3>
        <ol>
            <li>
                Install with <a href="http://bower.io/">bower</a>:
{{#code "js"}}
bower install dust-intl
{{/code}}
                or download directly from:

                <ul>
                    <li><a href="{{cdnUrl 'dust-intl/dist/dust-intl.min.js'}}">dust-intl.min.js ({{size "dust-intl/dist/dust-intl.min.js"}} gz)</a></li>
                    <li><a href="{{cdnUrl 'dust-intl/dist/dust-intl-with-locales.min.js'}}">dust-intl-with-locales.min.js ({{size "dust-intl/dist/dust-intl-with-locales.min.js"}} gz)</a></li>
                </ul>

            </li>
            <li>Load the scripts into your page.
{{#code "html"}}
<script src="dustjs-linkedin/dust-full.min.js"></script>
<script src="dust-intl/dust-intl.min.js"></script>
{{/code}}
            </li>
            <li>Register the helpers:
{{#code "js"}}
DustIntl.registerWith(dust);
{{/code}}
            </li>
        </ol>
        <p class="note">
        <strong>NOTE:</strong>
        Older browsers and Safari do not provide the global {{code "Intl"}} object (ECMA-402).
        Read more on <a href="{{pathTo 'guide'}}#how-to-patch">how to patch the browser</a> using a polyfill.
        </p>


        <h3 id="install-node">Node/CommonJS</h3>
        <ol>
            <li>You can install the helpers with npm:
{{#code "js"}}
npm install intl dust-intl
{{/code}}
            </li>
            <li>Load in the module and register it:
{{#code "js"}}
if (global.Intl) {
    global.Intl = require('intl'); // use polyfill for ECMA-402
}
var dust = require('dustjs-linkedin');
var DustIntl = require('dust-intl');
DustIntl.registerWith(dust);
{{/code}}
            </li>
        </ol>

        <p class="note">
        <strong>NOTE:</strong>
        Node (as of 0.10) doesn't provide the global <code>Intl</code> object (ECMA-402).
        Read more on <a href="{{pathTo 'guide'}}#how-to-patch">how to patch the browser</a> using a polyfill.
        </p>


        <h2 id="context-requirements">Context Requirements</h2>
        <p>
        For dust-intl, the internationalization details are passed to the helpers via the <code>intl</code> key in the context.
        </p>


        <h3 id="context-locales"><code>intl.locales</code></h3>
        <p>
        This location in the context should be set to an <a href="http://en.wikipedia.org/wiki/IETF_language_tag">IETF language tag</a> for the current language.
        </p>

        <p>
        Example:
{{#code "js"}}
context = {
    intl: {
        locales: 'en-US'
    }
}
{{/code}}
        </p>


        <h3 id="context-formats"><code>intl.formats</code></h3>
        <p>
        This location in the context can be used to set different preset formats for the handlers.
        It is an object which contains keys named for each handler.
        </p>

        <p>
        These formats are supported in the <a href="#formatDate"><code>{@formatDate}</code></a>, <a href="#formatTime"><code>{@formatTime}</code></a>, and <a href="#formatNumber"><code>{@formatNumber}</code></a> helpers via the <code>formatName</code> parameter.
        </p>

        <p>Example:</p>
{{#code "js"}}
context = {
    intl: {
        formats: {
            // predefined formats for {@formatDate}
            date: {
                bill: { month: 'long' day: 'numeric' year: 'numeric'}
            },

            // predefined formats for {@formatTime}
            time: {
                hm: { hour: 'numeric', minute: 'numeric' }
            },

            // predefined formats for {@formatNumber}
            number: {
                eur: { style: 'currency', currency: 'EUR' },
                usd: { style: 'currency', currency: 'USD' }
            }
        }
    }
}
{{/code}}


        <h3 id="context-messages"><code>intl.messages</code></h3>
        <p>
        This location in the context is used by <a href="#formatMessage"><code>{@formatMessage}</code></a>.
        It is an object, each key being the name of a message, and each value being an <a href="http://userguide.icu-project.org/formatparse/messages">ICU formatted message</a>.
        The formatted messages should be appropriate for the user's current locale.
        </p>

        <p>
        These messages can be accessed in the <a href="#formatMessage"><code>{@formatMessage}</code></a> helper via the <code>_key</code> parameter.
        </p>

        <p>Example:</p>
{{#code "js"}}
context = {
    intl: {
        messages: {
            photos: '...'
        }
    }
}
{{/code}}


        <h2 id="formatDate">{@formatDate}</h2>
        <p>
        This helper is used to present a date in a way appropriate for the current locale.
        </p>

        <h3 id="formatDate-parameters">Parameters</h3>
        <dl>
            <dt><code>val</code> (required)</dt>
            <dd>
                This is the value which will be formatted.
                It will be passed to the <code>Date</code> constructor to create.
            </dd>
            <dd>
                <span class="note"><strong>Note:</strong> If you pass a timestamp be sure that it is an integer, not a string.</span>
            </dd>
            <dt><code>formatName</code> (optional)</dt>
            <dd>
                This looks in the context in <code>intl.formats.date</code> for an object containing formatting options to pass to the <code>Intl.DateTimeFormat()</code> constructor.
            </dd>
            <dt>others (optional)</dt>
            <dd>
                All other parameters are passed to the <code>Intl.DateTimeFormat()</code> constructor as options and are used to configure how the date is displayed.
                If the <code>formatName</code> parameter is also used, these parameters override those specified in the named format.
            </dd>
        </dl>

        <h3>Live Example</h3>
        {{~> example examples.date}}


        <h2 id="formatTime">{@formatTime}</h2>
        <p>
        This helper is used to present a time in a way appropriate for the current locale.
        </p>

        <p>
        This helper is nearly identical to the <a href="#formatDate">{@formatDate}</a> helper, except the <code>formatName</code> parameter instead looks in <code>intl.formats.time</code> in the context.
        </p>

        <p>
        See <a href="#formatDate">{@formatDate}</a> for details on how to use this helper as well.
        </p>

        <h3>Live Example</h3>
        {{~> example examples.time}}


        <h2 id="formatRelative">{@formatRelative}</h2>

        <p>
        This helper is used to present a relative time, also called timeago.
        </p>

        <h3>Live Example</h3>
        {{~> example examples.relative}}


        <h2 id="formatNumber">{@formatNumber}</h2>
        <p>
        This helper is used to present a time in a way appropriate for the current locale.
        It can be used for generic numbers (such as count, sum, or quantity) or for special numbers such as currency or percentage.
        </p>

        <h3 id="formatNumber-parameters">Parameters</h3>
        <dl>
            <dt><code>val</code> (required)</dt>
            <dd>
                This is the value which will be formatted.
            </dd>
            <dt><code>formatName</code> (optional)</dt>
            <dd>
                This looks in the context in <code>intl.formats.number</code> for an object containing formatting options to pass to the <code>Intl.NumberFormat()</code> constructor.
            </dd>
            <dt>others (optional)</dt>
            <dd>
                All other parameters are passed to the <code>Intl.NumberFormat()</code> constructor as options and are used to configure how the number is displayed.
                If the <code>formatName</code> parameter is also used, these parameters override those specified in the named format.
            </dd>
        </dl>

        <h3>Live Example</h3>
        {{~> example examples.number}}


        <h2 id="formatMessage">{@formatMessage}</h2>

        <p>
        In order to use the <a href="#formatMessage"><code>{@formatMessage}</code></a> helper you'll need to translate your strings into all the languages you wish to show.
        These translations are provided in the <a href="http://userguide.icu-project.org/formatparse/messages">ICU Message</a> syntax, which is familiar to professional translators.
        The message format also supports choosing different strings based on pluralization, gender, or other considerations.
        See the <a href="{{pathTo 'guide'}}#messageformat-syntax">Guide</a> for more details on how to
        write those messages.
        </p>

        <h3>Live Example</h3>
        {{~> example examples.message}}


        <h2 id="intl">{@intl}</h2>

        <p>
            This is a block helper that can be used to create a new intl data scope. This is useful when you need to render part of the page in a particular locale, or need to supply the i18n data to Dust via the template context.
        </p>

    </section>
</main>
