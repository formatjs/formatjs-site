{{sectionHeading "intlHTMLMessage"}}

<p>The {{code "intlHTMLMessage"}} helper can format strings in the same way as {{code "intlMessage"}}, however this method returns a
Handlebars <a href="http://handlebarsjs.com/#html-escaping">{{code "SafeString"}}</a>. This means that Handlebars will not escape this string so <strong>only use this when absolutely necessary</strong>. Also <strong>make sure</strong> that variables you pass in are escaped properly. Remember to use the {{code "{{#intl}}"}} helper to properly set any custom message formats or locales you wish to use.</p>

<h3>Required Parameter</h3>
<dl class="parameters-list">
    <dt>{{code "value: String"}}</dt>
    <dd>The message that you want to format. <a href="/javascript/#messageformat-strings">Find out more</a> about how to construct templatized messages.</dd>
</dl>

<h3>Hash Arguments (optional)</h3>
<p>
    Other parameters can be passed into {{code "intlHTMLMessage"}} as key/value pairs via the {{code "context"}} object. The examples below demonstrate how you can format strings by modifying the properties of the {{code "context"}} object.
</p>

<h3>Examples</h3>

<h4>Using a context object</h4>
<p>
    When formatting a string, you can pass in an object that contains the data that you want to format. We call this the {{code "context"}} object. The following example explains how to use a context to format a string.
</p>

<p>Template:</p>
{{#code "generic"}}
{{{examples.url.source}}}
{{/code}}

<p>Context:</p>
{{#code "js"}}
{
    intl: {
        messages: {
             "DEMO_FORM": "<a href='{siteDomain}/test/demo_form.asp?name1=value1&name2=value2'>submit</a>"
        }
    }
}
{{/code}}

<p>Rendered Output:</p>

<div class="example">
    {{{examples.url.rendered}}}
</div>
