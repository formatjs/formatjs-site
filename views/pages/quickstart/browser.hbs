{{setTitle "Internationalization in the Browser"}}

<h1>Internationalization in the Browser</h1>

<p>
For application developers, it's recommended to use the helpers for the template engine of your choice, rather than using {{code "intl-messageformat"}} or <a href="https://github.com/andyearnshaw/Intl.js/">Intl.js</a> directly.
</p>

<p>
For this quickstart example, we'll be using the <a href="https://www.npmjs.org/package/handlebars-helper-intl">helpers</a> for the <a href="http://handlebarsjs.com">Handlebars</a> template engine, though we also have <a href="https://www.npmjs.org/package/dust-helper-intl">helpers</a> available if you're using <a href="http://akdubya.github.io/dustjs/">Dust</a> templates too.
</p>

<h2>Set Up</h2>

<p>
Make sure you have <a href="http://bower.io/">Bower</a> (and git) installed.
</p>

{{#code "bash"}}
npm install -g bower
{{/code}}

<p>
Create a directory containing your project.
</p>

<p>
The following steps assume you create a static page {{code "index.html"}} within a subdirectory called {{code "app"}}.
</p>

<h2>Installation</h2>

<p>
Install from Bower using:
</p>

{{#code "bash"}}
$ cd app/

$ bower install handlbars handlebars-helper-intl
$ npm install intl-messageformat

{{/code}}

<p>
Bower should download the {{code "handlebars-helper-intl"}} and the {{code "handlebars"}} libraries into your application's {{code "bower_components"}} folder. Code for intl-messageformat comes from npm in the {{code "node_modules"}} folder. If you need to support older browsers, or browsers without Intl support such as Safari, you can also install the Intl.js polyfill using:
</p>

{{#code "bash"}}
$ bower install intl
{{/code}}

<p>
Then, load these components into your page:
</p>

{{#code "html"}}
<!-- Optional libraries, if older browser support required for Intl -->
<script src="/bower_components/intl/Intl.min.js"></script>

<!-- Required libraries -->

<!-- Handlebars -->
<script src="/bower_components/handlebars/handlebars.js"></script>

<!-- IntlMessageFormat library with the English language pack -->
<script src="/node_modules/intl-messageformat/build/intl-messageformat.en.min.js"></script>

<!-- IntlMessageFormat language pack for the French locale -->
<script src="/node_modules/intl-messageformat/locale-data/fr.js"></script>


<!-- Handlebars Helper -->
<script src="/bower_components/handlebars-helper-intl/build/helpers.min.js"></script>
{{/code}}

<p>
Now you need to create the content we want to be translated, and the data we want to feed into it.
Let's create some javascript objects for the strings as well as the data. Normally this content would
be brought dyanmically via an API.
(You may look at the <a href="/quickstart/node/">server side quickstart</a> as well.)
<p>

{{#code "js"}}

   var intlContext = {
        // normally fetched via some api based on the user's locale
        messages: {
            "enUS": {
                "USER_HAS_BOOKS": "{firstName} {lastName} has {numBooks, number, integer} {numBooks, plural, one {book} other {books}}.",
                "USER_WILL_SELL": "{firstName} will sell them on {dateBooks, date, long} for {price, number, USD}."
            },
            "frCA": {
                "USER_HAS_BOOKS": "{firstName} {lastName} a {numBooks, number, integer} {numBooks, plural, one {livre} other {livres}}.",
                "USER_WILL_SELL": "{firstName} les vendra le {dateBooks, date, long} pour {price, number, USD}."
            }
        },
        formats: {
            number: {
                USD: {
                    style   : 'currency',
                    currency: 'USD'
                }
            }
        },
        user : {
            firstName: 'John',
            lastName : 'Smith',
            numBooks : 2000
        },
        now : new Date()
    };


{{/code}}
<p>
Next we add our handlebars templates as script elements.
(Note that you must wrap the helpers you use with a context like this {{code "{{#intl}}{{/intl}}"}}.)
</p>

{{#code "html"}}

       <script id="template1" type="text/x-handlebars-template">
            \{{#intl locales="en-US" }}
                <p>
                    \{{intlMessage messages.enUS.USER_HAS_BOOKS
                        firstName=user.firstName
                        lastName=user.lastName
                        numBooks=user.numBooks}}



                </p>

                <p>
                    \{{intlMessage messages.enUS.USER_WILL_SELL
                        firstName=user.firstName
                        price=1000
                        dateBooks=now}}
                </p>

            \{{/intl}}
        </script>

       <script id="template2" type="text/x-handlebars-template">
            \{{#intl locales="fr-FR" }}
                <p>
                    \{{intlMessage messages.frCA.USER_HAS_BOOKS
                        firstName=user.firstName
                        lastName=user.lastName
                        numBooks=user.numBooks}}



                </p>

                <p>
                    \{{intlMessage messages.frCA.USER_WILL_SELL
                        firstName=user.firstName
                        price=1000
                        dateBooks=now}}
                </p>
            \{{/intl}}
        </script>

{{/code}}

<p>
Next, we register our handlebars helpers in the script.
</p>

{{#code "js"}}

HandlebarsHelperIntl.registerWith(Handlebars);

{{/code}}

<p>
In our HTML file, let's set up some markup for our example. We want to display our translation, and
use two buttons to show changing the language from English to French.
We will create the {{code "init"}} function next.
</p>

{{#code "html"}}

<body onload="init()">
        <strong>Content:</strong>
        <div id="content"></div>

        <hr>
        <strong>Swap Language:</strong>
        <p>

        <button id="english">Use English</button>
        <button id="german">Use French</button>
        </p>

</body>

{{/code}}

<p>Finally, let's initialize our templates, add some logic for populating the markup, and
hook up some events to our buttons to swap the template and rerender.
<p>

{{#code "js"}}

var hh_source = document.getElementById("template1").innerHTML,
    hh_source2 = document.getElementById("template2").innerHTML,
    hh_template = Handlebars.compile(hh_source),
    hh_template2 = Handlebars.compile(hh_source2),
    template = hh_template,
    context = intlContext;


function populateDiv(tmpl,ctx){
     var htmlOut = tmpl(ctx);
    document.getElementById('content').innerHTML = htmlOut;
}

function init(){
    // populate the div on startup with english
    populateDiv(template, context);

    document.getElementById("english").addEventListener('click', function(){
        template = hh_template;
        populateDiv(template,context);
    });
    document.getElementById("german").addEventListener('click', function(){
        template = hh_template2;
        populateDiv(template,context);
    });

}

{{/code}}

Once you have all this in your {{code "index.html"}} file, simply run it from a server and you will see something like this:

{{#code "html"}}

Content:
John Smith has 2,000 books.

John will sell them on June 18, 2014 for 1,000.

Swap Language:
[Use English]  [Use French]

{{/code}}

<p>
Click between "Use English" and "Use French" to see the different translations.
Here is a <a href="https://gist.github.com/triptych/e917ce54e4215a06ae5f">link</a> to a GitHub Gist with the complete code for this example.
</p>